---
description: Database: Use supabaseAdmin for server-side write operations
globs: 
alwaysApply: false
---

# Supabase Admin Client Usage

When performing write operations (create, update, delete) in server components or server actions, always use `supabaseAdmin` from `@/lib/supabase`. The regular client should only be used for read operations.

## Why Use supabaseAdmin

The admin client has elevated permissions and bypasses RLS policies, which is necessary for server-side write operations. Using the regular client may fail due to RLS policies, even if the user is authenticated.

## Guidelines

1. Always import from the correct location:
```typescript
import { supabaseAdmin } from "@/lib/supabase"
```

2. Use for all write operations:
```typescript
// Insert
const { error } = await supabaseAdmin
  .from("table_name")
  .insert({ data })

// Update
const { error } = await supabaseAdmin
  .from("table_name")
  .update({ data })
  .eq("id", id)

// Delete
const { error } = await supabaseAdmin
  .from("table_name")
  .delete()
  .eq("id", id)
```

## Security Rules

1. Never use `supabaseAdmin` in client components
2. Never expose the service role key in client code
3. Always validate data before writing to the database
4. Use RLS policies as a first line of defense

## Examples

### Good: Server-side write operation
```typescript
// In a server action or API route
import { supabaseAdmin } from "@/lib/supabase"

export async function createSponsor(data: SponsorData) {
  const { error } = await supabaseAdmin
    .from("hackathon_sponsors")
    .insert({
      hackathon_id: data.hackathonId,
      name: data.name,
      logo: data.logo
    })
  if (error) throw error
}
```

### Bad: Using supabaseAdmin in client component
```typescript
// ❌ Never do this in a client component
"use client"
import { supabaseAdmin } from "@/lib/supabase" // This would expose service key!

export function ClientComponent() {
  const handleSubmit = async () => {
    // This is wrong and won't work
    await supabaseAdmin.from("table").insert({ data })
  }
}
```

### Good: Client-side read operation
```typescript
// Regular client is fine for reading data
const { data, error } = await supabase
  .from("hackathon_sponsors")
  .select("*")
  .eq("hackathon_id", id)
```
```