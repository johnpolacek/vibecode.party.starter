---
description: Database: Type Safety Guidelines when working with supabase data
globs: 
alwaysApply: false
---
# Supabase Type Safety Guidelines

## Description
This rule defines our standards for ensuring type safety when working with Supabase data. It covers how to properly type database responses and transform data between snake_case (database) and camelCase (frontend) formats.

## Type Safety Rules

1. **Raw Database Types**
   - Create interfaces prefixed with `Raw` for database table shapes
   - Use snake_case to match database column names
   - Include all possible null values
   ```typescript
   interface RawTableName {
     id: string
     created_at: string
     updated_at: string
     some_field: string | null
     // ... other fields
   }
   ```

2. **Supabase Query Types**
   - Always type Supabase query responses
   - Use PostgrestError for error typing
   ```typescript
   const { data, error } = await supabaseAdmin
     .from("table_name")
     .select("*") as {
       data: RawTableName[] | null
       error: PostgrestError | null
     }
   ```

3. **Data Transformations**
   - Create explicit transformations from Raw types to frontend types
   - Document any type coercion (e.g., string to number)
   - Handle null/undefined values with defaults
   ```typescript
   return (data || []).map(raw => ({
     id: raw.id,
     createdAt: raw.created_at,
     someField: raw.some_field || defaultValue,
     // ... other transformations
   }))
   ```

## Example Implementation

```typescript
// 1. Import PostgrestError
import { PostgrestError } from "@supabase/supabase-js"

// 2. Define raw database type
interface RawHackathonSponsor {
  id: string
  hackathon_id: string | number
  name: string
  created_at: string
  updated_at: string
  // ... other fields
}

// 3. Define frontend type (in types/supabase.ts)
interface HackathonSponsor {
  id: string
  hackathonId: number
  name: string
  createdAt: string
  updatedAt: string
  // ... other fields
}

// 4. Implement type-safe query and transformation
async function getSponsors(hackathonId: string): Promise<HackathonSponsor[]> {
  const { data, error } = await supabaseAdmin
    .from("hackathon_sponsors")
    .select("*")
    .eq("hackathon_id", hackathonId) as {
      data: RawHackathonSponsor[] | null
      error: PostgrestError | null
    }

  if (error) throw new Error(error.message)

  return (data || []).map(raw => ({
    id: raw.id,
    hackathonId: Number(raw.hackathon_id),
    name: raw.name,
    createdAt: raw.created_at,
    updatedAt: raw.updated_at
  }))
}
```

## Best Practices

1. **Type Organization**
   - Keep Raw types close to where they're used
   - Keep frontend types in `types/supabase.ts`
   - Consider generating types from database schema

2. **Error Handling**
   - Always type and handle PostgrestError
   - Provide meaningful error messages
   - Log raw error details when needed

3. **Type Coercion**
   - Document why type coercion is needed
   - Use explicit conversion functions
   - Handle edge cases

4. **Null Safety**
   - Always provide defaults for null values
   - Document why defaults are chosen
   - Consider using nullish coalescing

## Why These Rules Matter

1. **Type Safety**
   - Catches mismatches between database and frontend
   - Prevents runtime errors from type mismatches
   - Makes refactoring safer

2. **Maintainability**
   - Clear separation between raw and transformed data
   - Explicit documentation of data flow
   - Easier to update when schema changes

3. **Developer Experience**
   - Better IDE support
   - Clearer error messages
   - Easier to understand data transformations

## Migration Strategy

When updating existing code:
1. Identify database tables without Raw types
2. Create Raw types based on actual database schema
3. Update queries to use type assertions
4. Add explicit transformations
5. Test for edge cases with null values