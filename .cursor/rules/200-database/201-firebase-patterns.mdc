---
description: 
globs: 
alwaysApply: false
---
# Firebase Patterns

## Description
This rule documents standard patterns for working with Firebase in our application, including Firestore, Firebase Admin SDK, and local development with the Firebase emulator.

## Prerequisites

### Java Installation
The Firebase emulator requires Java to be installed:
1. Download from [java.com](mdc:https:/www.java.com)
2. Install and verify with `java -version`
3. Ensure Java is in your system PATH

### Environment Variables
Required environment variables:
```
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_API_KEY=
FIREBASE_CLIENT_EMAIL=
FIREBASE_PRIVATE_KEY=
```

## Firebase Client Setup

### Client Configuration
```typescript
// lib/firebase/config.ts
import { initializeApp, getApps } from "firebase/app"
import { getFirestore } from "firebase/firestore"

const firebaseConfig = {
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
}

// Initialize Firebase
export const app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0]
export const db = getFirestore(app)
```

### Admin SDK Setup
```typescript
// lib/firebase/admin.ts
import { initializeApp, getApps, cert } from "firebase-admin/app"
import { getFirestore } from "firebase-admin/firestore"

const adminApp = getApps().length === 0
  ? initializeApp({
      credential: cert({
        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, "\n"),
      }),
    })
  : getApps()[0]

export const adminDb = getFirestore(adminApp)
```

## Firestore Patterns

### Server Components
```typescript
import { adminDb } from "@/lib/firebase/admin"

export async function ServerComponent() {
  const snapshot = await adminDb.collection("users").get()
  const users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))
  return <UserList users={users} />
}
```

### Client Components
```typescript
"use client"
import { db } from "@/lib/firebase/config"
import { collection, query, onSnapshot } from "firebase/firestore"

export function ClientComponent() {
  const [data, setData] = useState([])

  useEffect(() => {
    const q = query(collection(db, "users"))
    const unsubscribe = onSnapshot(q, (snapshot) => {
      setData(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })))
    })
    return () => unsubscribe()
  }, [])

  return <DataList data={data} />
}
```

### Server Actions
```typescript
"use server"
import { adminDb } from "@/lib/firebase/admin"

export async function createDocument(data: any) {
  const docRef = adminDb.collection("collection").doc()
  await docRef.set({
    ...data,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  })
  return docRef.id
}
```

## Local Development

### Firebase Emulator
Start the emulator with:
```bash
pnpm db:emulator:start
```

### Emulator Connection
```typescript
// lib/firebase/config.ts
import { connectFirestoreEmulator } from "firebase/firestore"

if (process.env.NODE_ENV === "development") {
  connectFirestoreEmulator(db, "localhost", 8080)
}
```

## Best Practices

1. **Data Structure**
   - Use subcollections for hierarchical data
   - Keep document sizes under 1MB
   - Use batch operations for multiple writes

2. **Security**
   - Always use security rules in production
   - Use Admin SDK for trusted server operations
   - Never expose service account keys in client code

3. **Performance**
   - Use queries with compound indexes
   - Implement pagination for large collections
   - Cache frequently accessed data

4. **Error Handling**
   ```typescript
   try {
     await adminDb.collection("users").add(data)
   } catch (error) {
     console.error("Error adding document:", error)
     throw new Error("Failed to add user")
   }
   ```

## Testing

1. **Use Emulator**
   ```typescript
   // In test setup
   process.env.FIREBASE_AUTH_EMULATOR_HOST = "localhost:9099"
   process.env.FIRESTORE_EMULATOR_HOST = "localhost:8080"
   ```

2. **Clear Data Between Tests**
   ```typescript
   beforeEach(async () => {
     await adminDb.recursiveDelete(adminDb.collection("users"))
   })
   ```
