{
  "name": "vibecode-party-starter",
  "version": "0.3.9",
  "license": "MIT",
  "description": "A Next.js starter project for vibecoding full stack SaaS apps with auth, backend, payments, email, and more",
  "keywords": [
    "nextjs",
    "template",
    "starter",
    "vibecoding"
  ],
  "author": "John Polacek",
  "scripts": {
    "dev": "next dev -p ${PORT:-3000}",
    "restart:dev": "pnpm db:restart && pnpm dev",
    "dev:db": "open -a Docker && sleep 5 && pnpm db:start && next dev --turbopack",
    "build": "pnpm generate:routes && next build",
    "start": "next start",
    "lint": "next lint",
    "boot:github": "brew install gh && gh auth login",
    "boot:vercel": "pnpm i -g vercel && vercel link",
    "boot:repo": "chmod +x ./scripts/init-repo.sh && ./scripts/init-repo.sh",
    "boot": "pnpm boot:github && pnpm boot:vercel && pnpm boot:repo",
    "go": "pnpm generate:routes && git add . && aicommits && git push origin main",
    "go:db": "pnpm db:push:prod && pnpm go",
    "test": "playwright test",
    "test:clean": "rm -rf ~/.cache/ms-playwright-tests test-results/ playwright-report/",
    "pw": "playwright test --ui --debug",
    "db:ensure-docker": "docker info > /dev/null 2>&1 || (echo 'üê≥ Starting Docker...' && open -a Docker && sleep 10)",
    "db:kill-ports": "lsof -ti:54321,54322,54323,54324,54325,54326,54327,54328,54329 | xargs -r kill -9",
    "db:restart": "pnpm db:ensure-docker && pnpm db:stop && pnpm db:kill-ports && docker ps -aq --filter name=supabase | xargs -r docker rm -f && docker network ls --filter name=supabase --format '{{.Name}}' | xargs -r docker network rm && docker ps -aq --filter name=postgres | xargs -r docker rm -f && pnpm db:start && pnpm db:reset:local",
    "db:restart:clean": "pnpm db:ensure-docker && pnpm db:stop && pnpm db:kill-ports && docker system prune -f --volumes --filter label=com.docker.compose.project=supabase && docker network prune -f && pnpm db:ensure-docker && pnpm db:start && pnpm db:reset:local",
    "db:start": "supabase start",
    "db:stop": "supabase stop",
    "db:get-url": "supabase status | grep 'DB URL' | awk '{print $3}'",
    "db:lint:local": "pnpm db:get-url | xargs supabase db lint --db-url",
    "db:push:local": "pnpm db:get-url | xargs -I {} supabase db push --db-url={} --include-all",
    "db:reset:local": "supabase db reset --db-url='postgresql://postgres:postgres@127.0.0.1:54322/postgres'",
    "db:push:prod": "dotenv -e .env.production -- bash -c 'backup_file=\"backup_$(date +%Y%m%d_%H%M%S).sql\" && mkdir -p backups && echo \"üîÑ Creating backup...\" && supabase link --project-ref \"$SUPABASE_PROJECT_REF\" --password \"$SUPABASE_DB_PASSWORD\" && supabase db dump --linked -f \"backups/$backup_file\" && supabase unlink && echo \"‚úÖ Backup saved to backups/$backup_file\" && echo \"‚ö†Ô∏è Pushing changes to production...\" && supabase link --project-ref \"$SUPABASE_PROJECT_REF\" --password \"$SUPABASE_DB_PASSWORD\" && supabase db push --include-all && supabase unlink'",
    "db:diff": "supabase db diff --use-migra -f migration",
    "ship": "pnpm lint && pnpm build && (pnpm dev & sleep 10 && pnpm test && kill $!) && pnpm db:push:prod && pnpm go",
    "db:link": "supabase link",
    "db:unlink": "supabase unlink",
    "db:deploy": "echo 'üö® Remember to backup first!' && npm run db:diff && echo '‚ö†Ô∏è Review the diff above. Continue? (ctrl+c to cancel)' && read && npm run db:push && npm run db:unlink",
    "db:backup": "dotenv -- bash -c 'backup_file=\"backup_$(date +%Y%m%d_%H%M%S).sql\" && echo \"üîÑ Creating backup...\" && supabase link --project-ref \"$SUPABASE_PROJECT_REF\" --password \"$SUPABASE_DB_PASSWORD\" && supabase db dump --linked -f \"backups/$backup_file\" && supabase unlink && echo \"‚úÖ Backup saved to backups/$backup_file\"'",
    "db:restore": "dotenv -- bash -c 'echo \"‚ö†Ô∏è WARNING: This will overwrite the current database with a backup file\" && echo \"Enter the backup file name from the backups directory (e.g. backup_20240402_123456.sql):\" && read backup_file && echo \"Are you sure you want to restore from backups/$backup_file? This cannot be undone! (y/N)\" && read confirm && [[ $confirm == \"y\" ]] && supabase link --project-ref $SUPABASE_PROJECT_REF --password $SUPABASE_DB_PASSWORD && psql \"postgresql://postgres:$SUPABASE_DB_PASSWORD@db.$SUPABASE_PROJECT_REF.supabase.co:5432/postgres\" -f \"backups/$backup_file\" && supabase unlink && echo \"‚úÖ Database restored from $backup_file\"'",
    "generate:routes": "tsx scripts/generate-routes.ts",
    "db:admin": "supabase status | grep 'Studio URL' | awk '{print $3}' | xargs open",
    "test:setup": "pnpm db:stop && pnpm db:start && pnpm db:reset:local",
    "test:full": "pnpm test:setup && pnpm test",
    "db:clean": "docker ps -aq --filter name=supabase | xargs -r docker rm -f && docker network ls --filter name=supabase --format '{{.Name}}' | xargs -r docker network rm && docker ps -aq --filter name=postgres | xargs -r docker rm -f",
    "db:switch": "pnpm db:stop && pnpm db:clean && pnpm db:start && pnpm db:reset:local",
    "bundle:llm": "tsx scripts/bundle-code.ts . llm_context.txt"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.3.16",
    "@ai-sdk/react": "^1.2.9",
    "@ai-sdk/replicate": "^0.2.7",
    "@aws-sdk/client-s3": "^3.787.0",
    "@aws-sdk/s3-request-presigner": "^3.787.0",
    "@clerk/backend": "^1.29.1",
    "@clerk/nextjs": "^6.16.0",
    "@heroicons/react": "^2.2.0",
    "@octokit/rest": "^21.1.1",
    "@radix-ui/react-accordion": "^1.2.7",
    "@radix-ui/react-alert-dialog": "^1.1.10",
    "@radix-ui/react-avatar": "^1.1.6",
    "@radix-ui/react-checkbox": "^1.2.2",
    "@radix-ui/react-collapsible": "^1.1.7",
    "@radix-ui/react-dialog": "^1.1.10",
    "@radix-ui/react-dropdown-menu": "^2.1.11",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-popover": "^1.1.10",
    "@radix-ui/react-progress": "^1.1.4",
    "@radix-ui/react-radio-group": "^1.3.3",
    "@radix-ui/react-scroll-area": "^1.2.5",
    "@radix-ui/react-select": "^2.2.2",
    "@radix-ui/react-separator": "^1.1.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.2.2",
    "@radix-ui/react-tabs": "^1.1.8",
    "@sendgrid/mail": "^8.1.5",
    "@stripe/react-stripe-js": "^3.6.0",
    "@stripe/stripe-js": "^6.1.0",
    "@supabase/supabase-js": "^2.49.4",
    "@types/lodash-es": "^4.17.12",
    "@types/react-google-recaptcha": "^2.1.9",
    "ai": "^4.3.9",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "eslint-config-prettier": "^10.1.2",
    "eslint-plugin-prettier": "^5.2.6",
    "ignore": "^7.0.3",
    "lodash-es": "^4.17.21",
    "lucide-react": "^0.501.0",
    "next": "15.3.1",
    "next-themes": "^0.4.6",
    "playwright": "link:@clerk/testing/playwright",
    "prettier": "^3.5.3",
    "react": "^19.1.0",
    "react-day-picker": "8.10.1",
    "react-dom": "^19.1.0",
    "react-google-recaptcha": "^3.1.0",
    "react-icons": "^5.5.0",
    "react-markdown": "^10.1.0",
    "server": "link:@clerk/nextjs/server",
    "slugify": "^1.6.6",
    "sonner": "^2.0.3",
    "stripe": "^17.7.0",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@clerk/testing": "^1.4.41",
    "@eslint/eslintrc": "^3.3.1",
    "@playwright/test": "^1.52.0",
    "@tailwindcss/postcss": "^4.1.4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.14.1",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@types/uuid": "^10.0.0",
    "dotenv": "^16.5.0",
    "dotenv-cli": "^8.0.0",
    "eslint": "^9.25.0",
    "eslint-config-next": "15.3.1",
    "supabase": "^2.20.12",
    "tailwindcss": "^4.1.4",
    "ts-node": "^10.9.2",
    "tsx": "^4.19.3",
    "typescript": "^5.8.3"
  }
}
